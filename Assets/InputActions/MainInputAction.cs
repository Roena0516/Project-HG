//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.1
//     from Assets/InputActions/MainInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActions/MainInputAction.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @MainInputAction: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @MainInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""MainInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7f98fd74-a655-4245-b9f9-6ad744dcfef3"",
            ""actions"": [
                {
                    ""name"": ""Line1Action"",
                    ""type"": ""Button"",
                    ""id"": ""8e6cf81a-f340-45bb-bfc5-edfe870be25f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line2Action"",
                    ""type"": ""Button"",
                    ""id"": ""8a6a2e68-97b8-45ed-98e6-cc98719dce98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line3Action"",
                    ""type"": ""Button"",
                    ""id"": ""c1d059d6-cde5-4626-8875-68e370ef2e10"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line4Action"",
                    ""type"": ""Button"",
                    ""id"": ""56008391-72e3-4af1-93f2-81e1165a0676"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""c699646c-d3ed-48bf-a4b7-09f0e3029757"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedDown"",
                    ""type"": ""Button"",
                    ""id"": ""69ed2805-34db-413f-ae13-4315e58dd021"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""989d39c6-5372-4e5c-9515-589be42b8282"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line1Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fec7c9f-a5f6-45a9-9b01-5ad4c0e509f6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdb6a3f7-c7f2-4e43-a34b-4e085eade0df"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc44ae47-cc47-437b-93cb-a7a1c8323111"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line2Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dfa200c-e3fb-4708-bb03-5fb6e355fa78"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line3Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ad6e538-9796-4428-90be-b5876cd8a91f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line4Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FreePlay"",
            ""id"": ""590c925e-18c3-46f9-8766-d2c8a355479d"",
            ""actions"": [
                {
                    ""name"": ""ListUp"",
                    ""type"": ""Button"",
                    ""id"": ""ac9f6b25-c588-4d9e-84e3-ac1327f6a869"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ListDown"",
                    ""type"": ""Button"",
                    ""id"": ""d77afe69-8bdb-4cd2-883c-fd08141f3cc6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DifficultyUp"",
                    ""type"": ""Button"",
                    ""id"": ""d07ca4e6-78f2-4604-9310-3f510e9a19aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DifficultyDown"",
                    ""type"": ""Button"",
                    ""id"": ""e46222dc-846e-4182-96be-8b1c064a957b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollList"",
                    ""type"": ""Value"",
                    ""id"": ""c2fd598c-1dac-4414-a1e4-a272c24a4255"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SongSelect"",
                    ""type"": ""Button"",
                    ""id"": ""ad4de43e-da71-41d5-9b4b-2005d6f77db8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitSongList"",
                    ""type"": ""Button"",
                    ""id"": ""4efbf6f8-6044-4898-97a9-09e10f067fde"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""d99ac480-4e45-4522-8501-e6c8657ce879"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedDown"",
                    ""type"": ""Button"",
                    ""id"": ""d18f693e-172f-4798-b3f9-7a0261e331e4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac8d6b32-4144-48de-a9fb-aa67bf43d8a8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d2c44ed-0797-456b-b4ed-29ec16566fbe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae2272d2-a717-4e53-97d1-dac2c6e4d191"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db34ef2a-036a-4cbc-bf0e-68b0e0b012c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""367544d0-cf5c-4c8a-9329-744fa009b4a0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b232744c-d749-4329-b619-c6f0ad5cfb00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05504b6e-74ed-4bed-a768-5604a6de8778"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c14e1943-3ef6-405a-bcf8-7303aa5f8b78"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""477e2706-69b6-49be-8877-450bacc00570"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064cad5b-cdfd-424a-8264-836dc9b7f981"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69bf0138-1efd-401c-8e5b-11fbffd444b1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DifficultyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae3494f-74ab-4c6e-bd0d-fdefc32c20c5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SongSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d24bc5-5941-4b06-8ad9-ecb637d46e94"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SongSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c5b8e7-36a9-483d-b260-9dcafff38d48"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitSongList"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfc2d4a4-5e15-4725-8053-cad11d3c6550"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5041ebb-d604-4380-a608-634825715d0c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""330bec25-6bdc-435c-a35c-bed1fc22f307"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollList"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""8c010e7f-3da1-4f12-8799-7720b45ccd4f"",
            ""actions"": [
                {
                    ""name"": ""ListUp"",
                    ""type"": ""Button"",
                    ""id"": ""eb683d89-a100-438e-987d-906310c639a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ListDown"",
                    ""type"": ""Button"",
                    ""id"": ""deaca0ec-e5b1-4c1c-920d-6289d1a1f882"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuSelect"",
                    ""type"": ""Button"",
                    ""id"": ""6104eb08-58b1-433a-be5e-605a4ec87b0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""d2edbac9-da17-43f1-a554-c335d1105559"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c663219-368e-47da-af7f-344ef5c79415"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abb10ef5-a1d4-4cb3-8301-c63f9bec65e9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""867f5caa-ec39-4300-979c-62828ebbf443"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bc95a23-40b8-4deb-8818-c4bc1616897f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ListDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""652dc011-2c93-430a-9210-da2a349ba1c3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36d80e53-95be-4c2b-9779-87ab85a27844"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Temp"",
            ""id"": ""771df4de-0ff9-4157-b65a-0d18de3e1ca2"",
            ""actions"": [
                {
                    ""name"": ""Line1Action"",
                    ""type"": ""Button"",
                    ""id"": ""da792158-35cb-48db-b39e-c083cc3ab553"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line2Action"",
                    ""type"": ""Button"",
                    ""id"": ""e7711184-c8e1-4da5-98b7-638624af8937"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line3Action"",
                    ""type"": ""Button"",
                    ""id"": ""def747a2-9f15-4e31-a026-fcd15871c7b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line4Action"",
                    ""type"": ""Button"",
                    ""id"": ""dd6e9bea-b388-458d-8fe6-9b58f6e8d72b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6ba7fd9-acdd-4758-abd8-52303e6bf163"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line1Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96a8db14-8454-462a-a06a-e0e0b23c4b00"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line2Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0849dff-8e86-4d66-805a-ae0406c3f421"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line3Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd136e5a-5887-411f-ad7c-cf62468c981d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line4Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Line1Action = m_Player.FindAction("Line1Action", throwIfNotFound: true);
        m_Player_Line2Action = m_Player.FindAction("Line2Action", throwIfNotFound: true);
        m_Player_Line3Action = m_Player.FindAction("Line3Action", throwIfNotFound: true);
        m_Player_Line4Action = m_Player.FindAction("Line4Action", throwIfNotFound: true);
        m_Player_SpeedUp = m_Player.FindAction("SpeedUp", throwIfNotFound: true);
        m_Player_SpeedDown = m_Player.FindAction("SpeedDown", throwIfNotFound: true);
        // FreePlay
        m_FreePlay = asset.FindActionMap("FreePlay", throwIfNotFound: true);
        m_FreePlay_ListUp = m_FreePlay.FindAction("ListUp", throwIfNotFound: true);
        m_FreePlay_ListDown = m_FreePlay.FindAction("ListDown", throwIfNotFound: true);
        m_FreePlay_DifficultyUp = m_FreePlay.FindAction("DifficultyUp", throwIfNotFound: true);
        m_FreePlay_DifficultyDown = m_FreePlay.FindAction("DifficultyDown", throwIfNotFound: true);
        m_FreePlay_ScrollList = m_FreePlay.FindAction("ScrollList", throwIfNotFound: true);
        m_FreePlay_SongSelect = m_FreePlay.FindAction("SongSelect", throwIfNotFound: true);
        m_FreePlay_ExitSongList = m_FreePlay.FindAction("ExitSongList", throwIfNotFound: true);
        m_FreePlay_SpeedUp = m_FreePlay.FindAction("SpeedUp", throwIfNotFound: true);
        m_FreePlay_SpeedDown = m_FreePlay.FindAction("SpeedDown", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_ListUp = m_Menu.FindAction("ListUp", throwIfNotFound: true);
        m_Menu_ListDown = m_Menu.FindAction("ListDown", throwIfNotFound: true);
        m_Menu_MenuSelect = m_Menu.FindAction("MenuSelect", throwIfNotFound: true);
        m_Menu_Exit = m_Menu.FindAction("Exit", throwIfNotFound: true);
        // Temp
        m_Temp = asset.FindActionMap("Temp", throwIfNotFound: true);
        m_Temp_Line1Action = m_Temp.FindAction("Line1Action", throwIfNotFound: true);
        m_Temp_Line2Action = m_Temp.FindAction("Line2Action", throwIfNotFound: true);
        m_Temp_Line3Action = m_Temp.FindAction("Line3Action", throwIfNotFound: true);
        m_Temp_Line4Action = m_Temp.FindAction("Line4Action", throwIfNotFound: true);
    }

    ~@MainInputAction()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, MainInputAction.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FreePlay.enabled, "This will cause a leak and performance issues, MainInputAction.FreePlay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Menu.enabled, "This will cause a leak and performance issues, MainInputAction.Menu.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Temp.enabled, "This will cause a leak and performance issues, MainInputAction.Temp.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Line1Action;
    private readonly InputAction m_Player_Line2Action;
    private readonly InputAction m_Player_Line3Action;
    private readonly InputAction m_Player_Line4Action;
    private readonly InputAction m_Player_SpeedUp;
    private readonly InputAction m_Player_SpeedDown;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @MainInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Line1Action".
        /// </summary>
        public InputAction @Line1Action => m_Wrapper.m_Player_Line1Action;
        /// <summary>
        /// Provides access to the underlying input action "Player/Line2Action".
        /// </summary>
        public InputAction @Line2Action => m_Wrapper.m_Player_Line2Action;
        /// <summary>
        /// Provides access to the underlying input action "Player/Line3Action".
        /// </summary>
        public InputAction @Line3Action => m_Wrapper.m_Player_Line3Action;
        /// <summary>
        /// Provides access to the underlying input action "Player/Line4Action".
        /// </summary>
        public InputAction @Line4Action => m_Wrapper.m_Player_Line4Action;
        /// <summary>
        /// Provides access to the underlying input action "Player/SpeedUp".
        /// </summary>
        public InputAction @SpeedUp => m_Wrapper.m_Player_SpeedUp;
        /// <summary>
        /// Provides access to the underlying input action "Player/SpeedDown".
        /// </summary>
        public InputAction @SpeedDown => m_Wrapper.m_Player_SpeedDown;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Line1Action.started += instance.OnLine1Action;
            @Line1Action.performed += instance.OnLine1Action;
            @Line1Action.canceled += instance.OnLine1Action;
            @Line2Action.started += instance.OnLine2Action;
            @Line2Action.performed += instance.OnLine2Action;
            @Line2Action.canceled += instance.OnLine2Action;
            @Line3Action.started += instance.OnLine3Action;
            @Line3Action.performed += instance.OnLine3Action;
            @Line3Action.canceled += instance.OnLine3Action;
            @Line4Action.started += instance.OnLine4Action;
            @Line4Action.performed += instance.OnLine4Action;
            @Line4Action.canceled += instance.OnLine4Action;
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
            @SpeedDown.started += instance.OnSpeedDown;
            @SpeedDown.performed += instance.OnSpeedDown;
            @SpeedDown.canceled += instance.OnSpeedDown;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Line1Action.started -= instance.OnLine1Action;
            @Line1Action.performed -= instance.OnLine1Action;
            @Line1Action.canceled -= instance.OnLine1Action;
            @Line2Action.started -= instance.OnLine2Action;
            @Line2Action.performed -= instance.OnLine2Action;
            @Line2Action.canceled -= instance.OnLine2Action;
            @Line3Action.started -= instance.OnLine3Action;
            @Line3Action.performed -= instance.OnLine3Action;
            @Line3Action.canceled -= instance.OnLine3Action;
            @Line4Action.started -= instance.OnLine4Action;
            @Line4Action.performed -= instance.OnLine4Action;
            @Line4Action.canceled -= instance.OnLine4Action;
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
            @SpeedDown.started -= instance.OnSpeedDown;
            @SpeedDown.performed -= instance.OnSpeedDown;
            @SpeedDown.canceled -= instance.OnSpeedDown;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // FreePlay
    private readonly InputActionMap m_FreePlay;
    private List<IFreePlayActions> m_FreePlayActionsCallbackInterfaces = new List<IFreePlayActions>();
    private readonly InputAction m_FreePlay_ListUp;
    private readonly InputAction m_FreePlay_ListDown;
    private readonly InputAction m_FreePlay_DifficultyUp;
    private readonly InputAction m_FreePlay_DifficultyDown;
    private readonly InputAction m_FreePlay_ScrollList;
    private readonly InputAction m_FreePlay_SongSelect;
    private readonly InputAction m_FreePlay_ExitSongList;
    private readonly InputAction m_FreePlay_SpeedUp;
    private readonly InputAction m_FreePlay_SpeedDown;
    /// <summary>
    /// Provides access to input actions defined in input action map "FreePlay".
    /// </summary>
    public struct FreePlayActions
    {
        private @MainInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FreePlayActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/ListUp".
        /// </summary>
        public InputAction @ListUp => m_Wrapper.m_FreePlay_ListUp;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/ListDown".
        /// </summary>
        public InputAction @ListDown => m_Wrapper.m_FreePlay_ListDown;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/DifficultyUp".
        /// </summary>
        public InputAction @DifficultyUp => m_Wrapper.m_FreePlay_DifficultyUp;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/DifficultyDown".
        /// </summary>
        public InputAction @DifficultyDown => m_Wrapper.m_FreePlay_DifficultyDown;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/ScrollList".
        /// </summary>
        public InputAction @ScrollList => m_Wrapper.m_FreePlay_ScrollList;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/SongSelect".
        /// </summary>
        public InputAction @SongSelect => m_Wrapper.m_FreePlay_SongSelect;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/ExitSongList".
        /// </summary>
        public InputAction @ExitSongList => m_Wrapper.m_FreePlay_ExitSongList;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/SpeedUp".
        /// </summary>
        public InputAction @SpeedUp => m_Wrapper.m_FreePlay_SpeedUp;
        /// <summary>
        /// Provides access to the underlying input action "FreePlay/SpeedDown".
        /// </summary>
        public InputAction @SpeedDown => m_Wrapper.m_FreePlay_SpeedDown;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_FreePlay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FreePlayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FreePlayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FreePlayActions" />
        public void AddCallbacks(IFreePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_FreePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreePlayActionsCallbackInterfaces.Add(instance);
            @ListUp.started += instance.OnListUp;
            @ListUp.performed += instance.OnListUp;
            @ListUp.canceled += instance.OnListUp;
            @ListDown.started += instance.OnListDown;
            @ListDown.performed += instance.OnListDown;
            @ListDown.canceled += instance.OnListDown;
            @DifficultyUp.started += instance.OnDifficultyUp;
            @DifficultyUp.performed += instance.OnDifficultyUp;
            @DifficultyUp.canceled += instance.OnDifficultyUp;
            @DifficultyDown.started += instance.OnDifficultyDown;
            @DifficultyDown.performed += instance.OnDifficultyDown;
            @DifficultyDown.canceled += instance.OnDifficultyDown;
            @ScrollList.started += instance.OnScrollList;
            @ScrollList.performed += instance.OnScrollList;
            @ScrollList.canceled += instance.OnScrollList;
            @SongSelect.started += instance.OnSongSelect;
            @SongSelect.performed += instance.OnSongSelect;
            @SongSelect.canceled += instance.OnSongSelect;
            @ExitSongList.started += instance.OnExitSongList;
            @ExitSongList.performed += instance.OnExitSongList;
            @ExitSongList.canceled += instance.OnExitSongList;
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
            @SpeedDown.started += instance.OnSpeedDown;
            @SpeedDown.performed += instance.OnSpeedDown;
            @SpeedDown.canceled += instance.OnSpeedDown;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FreePlayActions" />
        private void UnregisterCallbacks(IFreePlayActions instance)
        {
            @ListUp.started -= instance.OnListUp;
            @ListUp.performed -= instance.OnListUp;
            @ListUp.canceled -= instance.OnListUp;
            @ListDown.started -= instance.OnListDown;
            @ListDown.performed -= instance.OnListDown;
            @ListDown.canceled -= instance.OnListDown;
            @DifficultyUp.started -= instance.OnDifficultyUp;
            @DifficultyUp.performed -= instance.OnDifficultyUp;
            @DifficultyUp.canceled -= instance.OnDifficultyUp;
            @DifficultyDown.started -= instance.OnDifficultyDown;
            @DifficultyDown.performed -= instance.OnDifficultyDown;
            @DifficultyDown.canceled -= instance.OnDifficultyDown;
            @ScrollList.started -= instance.OnScrollList;
            @ScrollList.performed -= instance.OnScrollList;
            @ScrollList.canceled -= instance.OnScrollList;
            @SongSelect.started -= instance.OnSongSelect;
            @SongSelect.performed -= instance.OnSongSelect;
            @SongSelect.canceled -= instance.OnSongSelect;
            @ExitSongList.started -= instance.OnExitSongList;
            @ExitSongList.performed -= instance.OnExitSongList;
            @ExitSongList.canceled -= instance.OnExitSongList;
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
            @SpeedDown.started -= instance.OnSpeedDown;
            @SpeedDown.performed -= instance.OnSpeedDown;
            @SpeedDown.canceled -= instance.OnSpeedDown;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FreePlayActions.UnregisterCallbacks(IFreePlayActions)" />.
        /// </summary>
        /// <seealso cref="FreePlayActions.UnregisterCallbacks(IFreePlayActions)" />
        public void RemoveCallbacks(IFreePlayActions instance)
        {
            if (m_Wrapper.m_FreePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FreePlayActions.AddCallbacks(IFreePlayActions)" />
        /// <seealso cref="FreePlayActions.RemoveCallbacks(IFreePlayActions)" />
        /// <seealso cref="FreePlayActions.UnregisterCallbacks(IFreePlayActions)" />
        public void SetCallbacks(IFreePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_FreePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FreePlayActions" /> instance referencing this action map.
    /// </summary>
    public FreePlayActions @FreePlay => new FreePlayActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_ListUp;
    private readonly InputAction m_Menu_ListDown;
    private readonly InputAction m_Menu_MenuSelect;
    private readonly InputAction m_Menu_Exit;
    /// <summary>
    /// Provides access to input actions defined in input action map "Menu".
    /// </summary>
    public struct MenuActions
    {
        private @MainInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MenuActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Menu/ListUp".
        /// </summary>
        public InputAction @ListUp => m_Wrapper.m_Menu_ListUp;
        /// <summary>
        /// Provides access to the underlying input action "Menu/ListDown".
        /// </summary>
        public InputAction @ListDown => m_Wrapper.m_Menu_ListDown;
        /// <summary>
        /// Provides access to the underlying input action "Menu/MenuSelect".
        /// </summary>
        public InputAction @MenuSelect => m_Wrapper.m_Menu_MenuSelect;
        /// <summary>
        /// Provides access to the underlying input action "Menu/Exit".
        /// </summary>
        public InputAction @Exit => m_Wrapper.m_Menu_Exit;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MenuActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MenuActions" />
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @ListUp.started += instance.OnListUp;
            @ListUp.performed += instance.OnListUp;
            @ListUp.canceled += instance.OnListUp;
            @ListDown.started += instance.OnListDown;
            @ListDown.performed += instance.OnListDown;
            @ListDown.canceled += instance.OnListDown;
            @MenuSelect.started += instance.OnMenuSelect;
            @MenuSelect.performed += instance.OnMenuSelect;
            @MenuSelect.canceled += instance.OnMenuSelect;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MenuActions" />
        private void UnregisterCallbacks(IMenuActions instance)
        {
            @ListUp.started -= instance.OnListUp;
            @ListUp.performed -= instance.OnListUp;
            @ListUp.canceled -= instance.OnListUp;
            @ListDown.started -= instance.OnListDown;
            @ListDown.performed -= instance.OnListDown;
            @ListDown.canceled -= instance.OnListDown;
            @MenuSelect.started -= instance.OnMenuSelect;
            @MenuSelect.performed -= instance.OnMenuSelect;
            @MenuSelect.canceled -= instance.OnMenuSelect;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MenuActions.UnregisterCallbacks(IMenuActions)" />.
        /// </summary>
        /// <seealso cref="MenuActions.UnregisterCallbacks(IMenuActions)" />
        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MenuActions.AddCallbacks(IMenuActions)" />
        /// <seealso cref="MenuActions.RemoveCallbacks(IMenuActions)" />
        /// <seealso cref="MenuActions.UnregisterCallbacks(IMenuActions)" />
        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MenuActions" /> instance referencing this action map.
    /// </summary>
    public MenuActions @Menu => new MenuActions(this);

    // Temp
    private readonly InputActionMap m_Temp;
    private List<ITempActions> m_TempActionsCallbackInterfaces = new List<ITempActions>();
    private readonly InputAction m_Temp_Line1Action;
    private readonly InputAction m_Temp_Line2Action;
    private readonly InputAction m_Temp_Line3Action;
    private readonly InputAction m_Temp_Line4Action;
    /// <summary>
    /// Provides access to input actions defined in input action map "Temp".
    /// </summary>
    public struct TempActions
    {
        private @MainInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TempActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Temp/Line1Action".
        /// </summary>
        public InputAction @Line1Action => m_Wrapper.m_Temp_Line1Action;
        /// <summary>
        /// Provides access to the underlying input action "Temp/Line2Action".
        /// </summary>
        public InputAction @Line2Action => m_Wrapper.m_Temp_Line2Action;
        /// <summary>
        /// Provides access to the underlying input action "Temp/Line3Action".
        /// </summary>
        public InputAction @Line3Action => m_Wrapper.m_Temp_Line3Action;
        /// <summary>
        /// Provides access to the underlying input action "Temp/Line4Action".
        /// </summary>
        public InputAction @Line4Action => m_Wrapper.m_Temp_Line4Action;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Temp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TempActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TempActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TempActions" />
        public void AddCallbacks(ITempActions instance)
        {
            if (instance == null || m_Wrapper.m_TempActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TempActionsCallbackInterfaces.Add(instance);
            @Line1Action.started += instance.OnLine1Action;
            @Line1Action.performed += instance.OnLine1Action;
            @Line1Action.canceled += instance.OnLine1Action;
            @Line2Action.started += instance.OnLine2Action;
            @Line2Action.performed += instance.OnLine2Action;
            @Line2Action.canceled += instance.OnLine2Action;
            @Line3Action.started += instance.OnLine3Action;
            @Line3Action.performed += instance.OnLine3Action;
            @Line3Action.canceled += instance.OnLine3Action;
            @Line4Action.started += instance.OnLine4Action;
            @Line4Action.performed += instance.OnLine4Action;
            @Line4Action.canceled += instance.OnLine4Action;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TempActions" />
        private void UnregisterCallbacks(ITempActions instance)
        {
            @Line1Action.started -= instance.OnLine1Action;
            @Line1Action.performed -= instance.OnLine1Action;
            @Line1Action.canceled -= instance.OnLine1Action;
            @Line2Action.started -= instance.OnLine2Action;
            @Line2Action.performed -= instance.OnLine2Action;
            @Line2Action.canceled -= instance.OnLine2Action;
            @Line3Action.started -= instance.OnLine3Action;
            @Line3Action.performed -= instance.OnLine3Action;
            @Line3Action.canceled -= instance.OnLine3Action;
            @Line4Action.started -= instance.OnLine4Action;
            @Line4Action.performed -= instance.OnLine4Action;
            @Line4Action.canceled -= instance.OnLine4Action;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TempActions.UnregisterCallbacks(ITempActions)" />.
        /// </summary>
        /// <seealso cref="TempActions.UnregisterCallbacks(ITempActions)" />
        public void RemoveCallbacks(ITempActions instance)
        {
            if (m_Wrapper.m_TempActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TempActions.AddCallbacks(ITempActions)" />
        /// <seealso cref="TempActions.RemoveCallbacks(ITempActions)" />
        /// <seealso cref="TempActions.UnregisterCallbacks(ITempActions)" />
        public void SetCallbacks(ITempActions instance)
        {
            foreach (var item in m_Wrapper.m_TempActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TempActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TempActions" /> instance referencing this action map.
    /// </summary>
    public TempActions @Temp => new TempActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Line1Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine1Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line2Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine2Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line3Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine3Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line4Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine4Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedDown(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "FreePlay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FreePlayActions.AddCallbacks(IFreePlayActions)" />
    /// <seealso cref="FreePlayActions.RemoveCallbacks(IFreePlayActions)" />
    public interface IFreePlayActions
    {
        /// <summary>
        /// Method invoked when associated input action "ListUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnListUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ListDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnListDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DifficultyUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDifficultyUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DifficultyDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDifficultyDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollList" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollList(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SongSelect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSongSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ExitSongList" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExitSongList(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedDown(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Menu" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MenuActions.AddCallbacks(IMenuActions)" />
    /// <seealso cref="MenuActions.RemoveCallbacks(IMenuActions)" />
    public interface IMenuActions
    {
        /// <summary>
        /// Method invoked when associated input action "ListUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnListUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ListDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnListDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MenuSelect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenuSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Exit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExit(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Temp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TempActions.AddCallbacks(ITempActions)" />
    /// <seealso cref="TempActions.RemoveCallbacks(ITempActions)" />
    public interface ITempActions
    {
        /// <summary>
        /// Method invoked when associated input action "Line1Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine1Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line2Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine2Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line3Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine3Action(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Line4Action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLine4Action(InputAction.CallbackContext context);
    }
}
