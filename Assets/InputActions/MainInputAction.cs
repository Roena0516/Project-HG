//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/MainInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7f98fd74-a655-4245-b9f9-6ad744dcfef3"",
            ""actions"": [
                {
                    ""name"": ""Line1Action"",
                    ""type"": ""Button"",
                    ""id"": ""8e6cf81a-f340-45bb-bfc5-edfe870be25f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line2Action"",
                    ""type"": ""Button"",
                    ""id"": ""8a6a2e68-97b8-45ed-98e6-cc98719dce98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line3Action"",
                    ""type"": ""Button"",
                    ""id"": ""c1d059d6-cde5-4626-8875-68e370ef2e10"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Line4Action"",
                    ""type"": ""Button"",
                    ""id"": ""56008391-72e3-4af1-93f2-81e1165a0676"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""989d39c6-5372-4e5c-9515-589be42b8282"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line1Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc44ae47-cc47-437b-93cb-a7a1c8323111"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line2Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dfa200c-e3fb-4708-bb03-5fb6e355fa78"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line3Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ad6e538-9796-4428-90be-b5876cd8a91f"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Line4Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Line1Action = m_Player.FindAction("Line1Action", throwIfNotFound: true);
        m_Player_Line2Action = m_Player.FindAction("Line2Action", throwIfNotFound: true);
        m_Player_Line3Action = m_Player.FindAction("Line3Action", throwIfNotFound: true);
        m_Player_Line4Action = m_Player.FindAction("Line4Action", throwIfNotFound: true);
    }

    ~@MainInputAction()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, MainInputAction.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Line1Action;
    private readonly InputAction m_Player_Line2Action;
    private readonly InputAction m_Player_Line3Action;
    private readonly InputAction m_Player_Line4Action;
    public struct PlayerActions
    {
        private @MainInputAction m_Wrapper;
        public PlayerActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Line1Action => m_Wrapper.m_Player_Line1Action;
        public InputAction @Line2Action => m_Wrapper.m_Player_Line2Action;
        public InputAction @Line3Action => m_Wrapper.m_Player_Line3Action;
        public InputAction @Line4Action => m_Wrapper.m_Player_Line4Action;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Line1Action.started += instance.OnLine1Action;
            @Line1Action.performed += instance.OnLine1Action;
            @Line1Action.canceled += instance.OnLine1Action;
            @Line2Action.started += instance.OnLine2Action;
            @Line2Action.performed += instance.OnLine2Action;
            @Line2Action.canceled += instance.OnLine2Action;
            @Line3Action.started += instance.OnLine3Action;
            @Line3Action.performed += instance.OnLine3Action;
            @Line3Action.canceled += instance.OnLine3Action;
            @Line4Action.started += instance.OnLine4Action;
            @Line4Action.performed += instance.OnLine4Action;
            @Line4Action.canceled += instance.OnLine4Action;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Line1Action.started -= instance.OnLine1Action;
            @Line1Action.performed -= instance.OnLine1Action;
            @Line1Action.canceled -= instance.OnLine1Action;
            @Line2Action.started -= instance.OnLine2Action;
            @Line2Action.performed -= instance.OnLine2Action;
            @Line2Action.canceled -= instance.OnLine2Action;
            @Line3Action.started -= instance.OnLine3Action;
            @Line3Action.performed -= instance.OnLine3Action;
            @Line3Action.canceled -= instance.OnLine3Action;
            @Line4Action.started -= instance.OnLine4Action;
            @Line4Action.performed -= instance.OnLine4Action;
            @Line4Action.canceled -= instance.OnLine4Action;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLine1Action(InputAction.CallbackContext context);
        void OnLine2Action(InputAction.CallbackContext context);
        void OnLine3Action(InputAction.CallbackContext context);
        void OnLine4Action(InputAction.CallbackContext context);
    }
}
